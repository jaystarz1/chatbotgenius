name: Update RSS Feed

on:
  schedule:
    # Run every 2 hours
    - cron: '0 */2 * * *'
  workflow_dispatch: # Allow manual trigger

jobs:
  update-feed:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Fetch and update RSS feed
      run: |
        node - <<'EOF'
        const fs = require('fs');
        const https = require('https');
        
        // RSS feed URLs
        const rssFeedUrl = 'https://www.google.ca/alerts/feeds/04066946017456136967/4823471870123205';
        const allFeeds = [
          'https://www.google.ca/alerts/feeds/04066946017456136967/4823471870123205',
          'https://www.google.ca/alerts/feeds/04066946017456136967/4217792680075237154',
          'https://www.google.ca/alerts/feeds/04066946017456136967/13089354697454058042',
          'https://www.google.ca/alerts/feeds/04066946017456136967/13089354697454058988',
          'https://www.google.ca/alerts/feeds/04066946017456136967/1942817214412033827'
        ];
        
        function fetchRSS(url) {
          return new Promise((resolve, reject) => {
            https.get(url, (res) => {
              let data = '';
              res.on('data', (chunk) => data += chunk);
              res.on('end', () => resolve(data));
            }).on('error', reject);
          });
        }
        
        async function updateNewsFeed() {
          try {
            // Fetch primary feed for sidebar
            const rssData = await fetchRSS(rssFeedUrl);
            
            // Parse RSS XML
            const items = rssData.match(/<entry>[\s\S]*?<\/entry>/g) || [];
            const newsItems = [];
            
            items.slice(0, 20).forEach(item => {
              const title = (item.match(/<title[^>]*>(.*?)<\/title>/s) || ['', ''])[1];
              const link = (item.match(/<link[^>]*href="([^"]*)"/) || ['', ''])[1];
              const content = (item.match(/<content[^>]*>(.*?)<\/content>/s) || ['', ''])[1];
              const published = (item.match(/<published>(.*?)<\/published>/) || ['', ''])[1];
              
              // Clean HTML from content
              const cleanContent = content
                .replace(/<[^>]*>/g, '')
                .replace(/&lt;/g, '<')
                .replace(/&gt;/g, '>')
                .replace(/&amp;/g, '&')
                .replace(/&quot;/g, '"')
                .substring(0, 150) + '...';
              
              newsItems.push({
                title: title.replace(/&amp;/g, '&').replace(/&lt;/g, '<').replace(/&gt;/g, '>'),
                link,
                excerpt: cleanContent,
                date: new Date(published).toLocaleDateString('en-US', {
                  month: 'short',
                  day: 'numeric',
                  year: 'numeric'
                })
              });
            });
            
            // Generate news HTML for sidebar
            const newsHTML = newsItems.map(item => `
                        <article class="news-item">
                            <h4><a href="${item.link}" target="_blank" rel="noopener noreferrer">${item.title}</a></h4>
                            <p>${item.excerpt}</p>
                            <div class="news-meta">
                                <span class="news-date">${item.date}</span>
                            </div>
                        </article>`).join('');
            
            // Add "View All" link
            const fullNewsHTML = newsHTML + `
                    <div style="text-align: center; margin-top: 20px; padding-top: 20px; border-top: 1px solid #ddd;">
                        <a href="/ai-news.html" style="color: #4c5fd5; text-decoration: none; font-weight: 600; font-size: 1.1rem;">
                            View All AI News â†’
                        </a>
                    </div>`;
            
            // Update index.html
            let indexContent = fs.readFileSync('index.html', 'utf8');
            const startMarker = '<div id="news-feed" class="news-feed">';
            const endMarker = '</div>\n            </div>\n        </aside>';
            
            const startIndex = indexContent.indexOf(startMarker);
            const endIndex = indexContent.indexOf(endMarker, startIndex);
            
            if (startIndex !== -1 && endIndex !== -1) {
              const newContent = 
                indexContent.substring(0, startIndex + startMarker.length) +
                '\n' + (fullNewsHTML || '                    <p class="news-error">No news items available</p>') + '\n                ' +
                indexContent.substring(endIndex);
              
              fs.writeFileSync('index.html', newContent);
              console.log('Homepage news feed updated successfully!');
            }
            
            // Category definitions
            const categoryKeywords = {
              'Business': ['ROI', 'revenue', 'profit', 'enterprise', 'CEO', 'startup', 'investment', 'market', 'business', 'company', 'corporate', 'executive', 'IPO', 'acquisition', 'merger'],
              'HR': ['hiring', 'recruitment', 'employee', 'workplace', 'talent', 'workforce', 'HR', 'human resources', 'staff', 'personnel', 'culture', 'remote work', 'hybrid'],
              'Tech': ['API', 'coding', 'software', 'hardware', 'cloud', 'developer', 'programming', 'tech', 'technology', 'platform', 'infrastructure', 'cybersecurity', 'data'],
              'ML': ['machine learning', 'neural', 'deep learning', 'LLM', 'transformer', 'dataset', 'algorithm', 'model', 'training', 'GPT', 'Claude', 'Gemini', 'ChatGPT'],
              'Ethics': ['bias', 'ethical', 'privacy', 'safety', 'regulation', 'governance', 'responsible', 'fairness', 'transparency', 'accountability', 'trust', 'policy'],
              'Healthcare': ['medical', 'patient', 'diagnosis', 'healthcare', 'clinical', 'doctor', 'hospital', 'health', 'medicine', 'treatment', 'therapy', 'FDA'],
              'Education': ['student', 'learning', 'education', 'training', 'course', 'university', 'school', 'teacher', 'curriculum', 'academic', 'research', 'study']
            };
            
            // Function to categorize an article
            function categorizeArticle(title, excerpt) {
              const text = (title + ' ' + excerpt).toLowerCase();
              let bestCategory = 'General';
              let highestScore = 0;
              
              for (const [category, keywords] of Object.entries(categoryKeywords)) {
                let score = 0;
                for (const keyword of keywords) {
                  if (text.includes(keyword.toLowerCase())) {
                    score++;
                  }
                }
                if (score > highestScore) {
                  highestScore = score;
                  bestCategory = category;
                }
              }
              
              return bestCategory;
            }
            
            // Now update AI News page with all feeds
            let allNewsItems = [];
            
            // Fetch all feeds
            for (const feedUrl of allFeeds) {
              try {
                const feedData = await fetchRSS(feedUrl);
                const feedItems = feedData.match(/<entry>[\s\S]*?<\/entry>/g) || [];
                
                feedItems.forEach(item => {
                  const title = (item.match(/<title[^>]*>(.*?)<\/title>/s) || ['', ''])[1];
                  const link = (item.match(/<link[^>]*href="([^"]*)"/) || ['', ''])[1];
                  const content = (item.match(/<content[^>]*>(.*?)<\/content>/s) || ['', ''])[1];
                  const published = (item.match(/<published>(.*?)<\/published>/) || ['', ''])[1];
                  
                  const cleanContent = content
                    .replace(/<[^>]*>/g, '')
                    .replace(/&lt;/g, '<')
                    .replace(/&gt;/g, '>')
                    .replace(/&amp;/g, '&')
                    .replace(/&quot;/g, '"')
                    .substring(0, 200) + '...';
                  
                  // Extract source
                  const sourceMatch = content.match(/- ([^<]+)$/);
                  const source = sourceMatch ? sourceMatch[1] : 'AI News';
                  
                  // Categorize the article
                  const category = categorizeArticle(title, cleanContent);
                  
                  allNewsItems.push({
                    title: title.replace(/&amp;/g, '&').replace(/&lt;/g, '<').replace(/&gt;/g, '>'),
                    link,
                    excerpt: cleanContent,
                    source,
                    category,
                    date: new Date(published),
                    dateString: new Date(published).toLocaleDateString('en-US', {
                      month: 'short',
                      day: 'numeric',
                      year: 'numeric'
                    })
                  });
                });
              } catch (e) {
                console.error('Error fetching feed:', feedUrl, e);
              }
            }
            
            // Remove duplicates and sort
            const uniqueItems = Array.from(
              new Map(allNewsItems.map(item => [item.title, item])).values()
            );
            uniqueItems.sort((a, b) => b.date - a.date);
            const displayItems = uniqueItems.slice(0, 100);
            
            // Generate AI News page HTML with categories
            const aiNewsHTML = displayItems.map(item => `
                    <article class="news-card" data-category="${item.category}">
                        <div class="news-card-content">
                            <span class="category-badge category-${item.category.toLowerCase()}">${item.category}</span>
                            <h3><a href="${item.link}" target="_blank" rel="noopener noreferrer">${item.title}</a></h3>
                            <p class="news-card-excerpt">${item.excerpt}</p>
                            <div class="news-card-meta">
                                <span class="news-source">${item.source}</span>
                                <span class="news-date">${item.dateString}</span>
                            </div>
                        </div>
                    </article>`).join('');
            
            // Update AI News page
            if (fs.existsSync('ai-news.html')) {
              let aiNewsContent = fs.readFileSync('ai-news.html', 'utf8');
              
              // Update stats
              aiNewsContent = aiNewsContent.replace(
                /<div class="news-stats"[^>]*>.*?<\/div>/s,
                `<div class="news-stats" id="news-stats">Showing ${displayItems.length} latest articles from ${allFeeds.length} sources</div>`
              );
              
              // Update grid
              const gridStart = '<div class="news-grid" id="news-grid">';
              const gridEnd = '</div>\n            </div>\n        </section>';
              const gridStartIndex = aiNewsContent.indexOf(gridStart);
              const gridEndIndex = aiNewsContent.indexOf(gridEnd, gridStartIndex);
              
              if (gridStartIndex !== -1 && gridEndIndex !== -1) {
                aiNewsContent = 
                  aiNewsContent.substring(0, gridStartIndex + gridStart.length) +
                  '\n' + aiNewsHTML + '\n                ' +
                  aiNewsContent.substring(gridEndIndex);
                
                fs.writeFileSync('ai-news.html', aiNewsContent);
                console.log('AI News page updated successfully!');
              }
            }
            
          } catch (error) {
            console.error('Error updating feed:', error);
          }
        }
        
        updateNewsFeed();
        EOF
        
    - name: Commit and push if changed
      run: |
        git config --global user.name 'GitHub Actions Bot'
        git config --global user.email 'actions@github.com'
        git add index.html
        git diff --staged --quiet || (git commit -m "Auto-update RSS feed" && git push)
